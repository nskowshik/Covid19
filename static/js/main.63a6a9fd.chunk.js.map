{"version":3,"sources":["reducer/rootReducer.js","TotalCase.js","StateCard.js","DistCases.js","DistrictCard.js","App.js","serviceWorker.js","index.js"],"names":["initialState","covid","rootReducer","state","axios","get","then","res","Object","assign","data","TotalCase","stateData","this","props","covidProps","sname","total","className","tested","confirmed","deceased","recovered","React","Component","connect","StateCard","State","covidData","setTimeout","setState","keys","getData","values","meta","date","map","statename","index","key","Card","Body","Title","Text","to","pathname","statevalue","Button","variant","DistCases","stsname","dist","distTotal","districts","vaccinated1","clasdist","vaccinated2","DistrictCard","StateCode","District","location","slice","distname","App","history","createBrowserHistory","basename","process","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","store","createStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63a6a9fd.chunk.js","sourcesContent":["import axios from 'axios';\nconst initialState = {\n    covid : {}\n}\nfunction rootReducer(state = initialState) {\n    axios.get(\"https://data.covid19india.org/v4/min/data.min.json\").then(res => {\n        Object.assign(initialState.covid,res.data)     \n    })\n    return state;\n};\n  \nexport default rootReducer;","import React from 'react'\nimport {connect} from 'react-redux'\n \nclass TotalCase extends React.Component{\n    \n    render(){\n       \n        const stateData = this.props.covidProps[this.props.sname || 0]?.total\n\n        return(\n            <div className=\"total\">\n                <p className=\"text-info\">Tested Cases : {stateData?.tested || 0}</p>\n                <p className=\"text-primary\">Total Cases : {stateData.confirmed + stateData.confirmed + stateData.confirmed || 0}</p>    \n                <p className=\"text-danger\">Total Death : {stateData?.deceased || 0 }</p>\n                <p className=\"text-success\">Recovered : {stateData?.recovered || 0}</p>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        covidProps : state.covid\n    } ;\n}\nexport default connect(mapStateToProps)(TotalCase)","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport './style.css'\nimport TotalCase from './TotalCase'\nimport {Link} from 'react-router-dom'\nimport { connect } from 'react-redux'\nclass StateCard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            State:[],\n            covidData : props.covidProps\n        }   \n    }\n    getData(){\n        setTimeout(() => {\n            this.setState({State : Object.keys(this.state.covidData)})\n        },500)\n    }\n    componentWillMount(){\n        this.getData()\n    }\n    render(){\n        \n        return(\n        <div>\n            <div className='fx titleWrapper title'>\n                <div className=\"fx2\">\n                    <h1>Covid' 19</h1>\n                    <p>Noval Corona Virus 2020</p>\n                </div>\n                <div className='lastSync'>\n                    <p>Last updated at : {Object.values(this.props.covidProps)[0]?.meta?.date}</p>\n                </div>\n            </div>\n            <div className=\"cards col-md-12\">\n                <div className=\"row padding\">\n                    {Object.keys(this.props.covidProps).map(  (statename,index) =>  ( \n                        <div className=\"col-md-4 padding\" key={`state-${index}`}>\n                            <Card>\n                                <Card.Body>\n                                <Card.Title>{statename}</Card.Title>\n                                    <Card.Text>\n                                        <TotalCase sname={statename}/>\n                                    </Card.Text>\n                                    <Link to={{pathname:`/${statename}` , statevalue : {statename}}}>\n                                        <Button variant=\"primary\">More Info</Button>\n                                    </Link>\n                                </Card.Body>\n                            </Card>   \n                        </div>     \n                        ) \n                        )\n                    }   \n                </div>\n            </div>\n        </div>\n        )\n    } \n}\nconst mapStateToProps = state => {\n    return {\n        covidProps : state.covid\n    } ;\n}\nexport default connect(mapStateToProps)(StateCard);\n","import React from 'react'\nimport {connect} from 'react-redux'\nclass DistCases extends React.Component{\n    render(props){\n        var stsname=this.props.stsname;\n        var dist=this.props.dist;\n        const distTotal =  this.props.covidProps[stsname].districts[dist].total\n        return(\n            <div className=\"total\">\n                <p className=\"text-primary\">Vacinated 1: {distTotal?.vaccinated1}</p>\n                <p clasdist=\"text-info\">Vacinated 2  : {distTotal?.vaccinated2}</p>\n                <p className=\"text-danger\">Total Vacination : {distTotal?.vaccinated1 + distTotal?.vaccinated2}</p>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        covidProps : state.covid\n    } ;\n}\nexport default connect(mapStateToProps)(DistCases)","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Card from 'react-bootstrap/Card'\nimport DistCases from './DistCases'\nimport {connect} from 'react-redux'\n\nclass DistrictCard extends React.Component{\n    constructor(props){\n        super(props);\n        this.state= {\n            StateCode: null,\n            covid:this.props.covidProps,\n            District :[]\n        }\n    }\n    getData(){\n        setTimeout(() => {\n            this.setState({StateCode:this.props.location.pathname.slice(1)})\n            this.setState({District : Object.keys(this.state.covid[this.state.StateCode].districts)})\n            \n        }, 500)\n      }\n    componentWillMount(){\n        this.getData();\n    }\n    render(){\n        return(\n            <>\n            <div className=\"title\">\n                <h1>{this.state.StateCode}</h1>\n            </div>\n            <div className=\"cards row padding fh\">\n                \n                {this.state.District.map(distname =>(\n                <div className='col-md-4 padding'>\n                    <Card>\n                        <Card.Body>\n                            <Card.Title>{distname}</Card.Title>\n                                <Card.Text>\n                                    <DistCases stsname={this.state.StateCode} dist={distname}/>\n                                </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </div>\n            )\n\n            )}\n            </div>  \n            </> \n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        covidProps : state.covid\n    } ;\n}\nexport default connect(mapStateToProps)(DistrictCard)","import React from 'react';\nimport './style.css';\nimport StateCard from './StateCard'\nimport {BrowserRouter ,Route} from 'react-router-dom'\nimport DistrictCard from './DistrictCard';\nimport { createBrowserHistory } from \"history\";\nclass App extends React.Component {\n  render(){\n    const history = createBrowserHistory();\n    return (\n      <div className=\"App\">\n        <BrowserRouter  history={history} basename={process.env.PUBLIC_URL}>\n          <Route exact path=\"/\" component={ StateCard}/>\n          <Route exact path=\"/:state_id\" component={DistrictCard}/>\n        </BrowserRouter>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux';\nimport rootReducer from '../src/reducer/rootReducer'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={createStore(rootReducer)}> \n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}